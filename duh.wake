tuple NodeModules =
  Dir:   String
  Files: List Path
  Path:  String

global def npmInstall Unit =
  #def cmdline = which "npm", "i", "duh@1.7.1", Nil
  def cmdline = which "npm", "i", "github:sifive/duh#duh-wake", Nil
  def inputs = Nil
  def foutputs _ = files "node_modules/.bin" '.*' ++ files "node_modules/duh" '.*'
  def job =
    makeManualPlan cmdline inputs foutputs
    | setPlanResources ("python/python/3.7.1", Nil)
    | runJob
  def path = if job.getJobStatus == 0 then "node_modules/.bin" else raise "\"npm i github:sifive/duh\" failed!"
  def dir = if job.getJobStatus == 0 then "node_modules" else raise "\"npm i github:sifive/duh\" failed!"
  NodeModules dir job.getJobOutputs path

def whichNPMCommand nodeModules runDir cmd =
  def nodeModulesPath = nodeModules.getNodeModulesPath
  whichIn nodeModulesPath cmd | relative runDir

global def duhValidate json =
  def nodeModules = Unit.npmInstall
  def cmdline = nodeModules.whichNPMCommand "." "duh", "validate", json.getPathName, Nil
  def inputs = json, nodeModules.getNodeModulesFiles
  def foutputs _ = Nil
  def validateJob =
    makeManualPlan cmdline inputs foutputs
    #| setJobCache False
    | runJob
  validateJob.getJobStatus == 0

global def duhExportScala json outputDir =
  def outputDirPath = mkdir outputDir
  def nodeModules = Unit.npmInstall
  def cmdline =
    def duh_scala = nodeModules.whichNPMCommand "." "duh-export-scala"
    duh_scala, json.getPathName, "-o", outputDir, Nil
  def inputs = json, outputDirPath, nodeModules.getNodeModulesFiles
  def foutputs _ = files outputDir '.*-base\.scala'
  if duhValidate json
  then
    makeManualPlan cmdline inputs foutputs
    | runJob
    | getJobOutputs
  else
    raise "Validate failed for {json.getPathName}!"


global def duhGet json value =
  def nodeModules = Unit.npmInstall
  def cmdline =
    def duh = nodeModules.whichNPMCommand "." "duh"
    duh, "get", value, json.getPathName, Nil
  def inputs = json, nodeModules.getNodeModulesFiles
  def foutputs _ = Nil
  def jobOut =
    makeManualPlan cmdline inputs foutputs
    | runJob
    | getJobStdout
  if matches "undefined" jobOut
  then
    raise "Value {value} is undefined in {json.getPathName}"
  else
    jobOut

global def duhImportVerilogPorts json file =
  def inputs = file, json, nodeModules.getNodeModulesFiles
  def nodeModules = Unit.npmInstall
  def output = prefix "ports" json.getPathName
  def cmdline = nodeModules.whichNPMCommand "." "duh-import-verilog-ports", json.getPathName, "-o", output, Nil
  def stdin = file.getPathName
  def foutputs _ = output, Nil
  makeManualPlan cmdline inputs foutputs
  | setPlanStandardInput stdin
  | runJob
  | getJobOutput

global def duhInferChannels json =
  def nodeModules = npmInstall Unit
  def inputs = json, nodeModules.getNodeModulesFiles
  def output = prefix "channels" json.getPathName
  def cmdline = nodeModules.whichNPMCommand "." "duh-infer-channels", json.getPathName, "-o", output, Nil
  def foutputs _ = output, Nil
  makeManualPlan cmdline inputs foutputs
  | runJob
  | getJobOutput

def prefix pre = replace '.*/' "\\0{pre}_"

global def duhExportScalaModule name fnJson outputDir =
  def generatedSources Unit =
    duhExportScala Unit.fnJson outputDir
    | filter (matches '.*\.scala' _.getPathName)

  makeScalaModule name outputDir "2.12.8".makeScalaVersion
  | setScalaModuleSourceDirs Nil
  | setScalaModuleFnGeneratedSources generatedSources
