def hereDependencies =
  def sourceDirs = "{here}/lib", "{here}/bin", "{here}/assets", Nil
  (map (files _ '.*') sourceDirs).flatten

def npmInstall _ =
  def cmdline = which "npm", "install", Nil
  def inputs = "{here}/package.json", hereDependencies
  def foutputs _ = Nil
  makeManualJob cmdline inputs foutputs
  | setJobDirectory here
  | runJob

def getDuh _ = if (npmInstall 0).status == 0 then "{here}/bin/duh.js" else raise "npm install failed!"
def getDuhScala _ = if (npmInstall 0).status == 0 then "{here}/bin/duh-export-scala.js" else raise "npm install failed!"

def npmValidate json =
  def duh = getDuh 0
  def cmdline = which "node", duh, "validate", json, Nil
  def inputs = json, Nil
  def foutputs _ = Nil
  manual_job cmdline inputs foutputs

global def duhGenerate json rawOutputDir =
  def outputDir = mkdir 0775 rawOutputDir
  def duh_scala = getDuhScala 0
  def relJson = relative outputDir json
  def cmdline = which "node", relative outputDir duh_scala, relJson, Nil
  def inputs = json, outputDir, Nil
  def foutputs _ = files outputDir "component/.*-base.scala"
  if (npmValidate json).status == 0
  then
    makeManualJob cmdline inputs foutputs
    | setJobDirectory outputDir
    | runJob
    | outputs
  else
    raise "Validate failed for {json}!"

global def duhGet json value =
  def duh = getDuh 0
  def cmdline = which "node", duh, "get", value, json, Nil
  def inputs = json, Nil
  def foutputs _ = Nil
  def jobOut = (manual_job cmdline inputs foutputs).stdout
  if matches "undefined" jobOut
  then
    raise "Value {value} is undefined in {json}"
  else
    jobOut
